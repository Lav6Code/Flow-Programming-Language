    if command == "object":
        for i in args: 
            if type(i.sol) != list: 
                raise_error("ARGUMENT ERROR: Trying to create a Triangle object, wrong arguments, should be sets points X,Y positions.", token)
            if len(args) != 3:
                raise_error("ARGUMENT ERROR: Number of points required to create a Triangle should be 3.", token)

        # Making the object's atributes

        # Points
        points = []
        for i in args:
            points.append(i.sol)
        
        # Sides
        sides = []
    
        for i in range(len(points)):
            x1, y1 = points[i]
            x2, y2 = points[(i + 1) % len(points)]  # Connect to the next point, and wrap around
            distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
            sides.append(distance)
        # Area
        area = 0
        for i in range(len(points)):
            x1, y1 = points[i]
            x2, y2 = points[(i + 1) % len(points)]
            area += x1 * y2 - y1 * x2
        area = abs(area)/2

        return {
                "name":"Triangle", 
                "points":points,
                "sides":sides,
                "area":area, 
                "perimeter":sum(sides)
                }
    
    elif command == "get":
        if type(args[0].sol) == dict and type(args[1].sol) == str:
            try:
                return args[0].sol[args[1].sol.lower()]
            except:
                raise_error("ARGUMENT ERROR: Value that is trying to get from object is not in object.", token)
        else:
            raise_error("ARGUMENT ERROR: Error while trying to get object's value.", token)